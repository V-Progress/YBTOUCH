package com.ideafactory.client.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.ideafactory.client.business.faceDetect.bean.FaceInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FACE_INFO".
*/
public class FaceInfoDao extends AbstractDao<FaceInfo, Void> {

    public static final String TABLENAME = "FACE_INFO";

    /**
     * Properties of entity FaceInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Lable = new Property(0, String.class, "lable", false, "LABLE");
        public final static Property Age = new Property(1, String.class, "age", false, "AGE");
        public final static Property Sex = new Property(2, String.class, "sex", false, "SEX");
        public final static Property AdsId = new Property(3, String.class, "adsId", false, "ADS_ID");
        public final static Property TaskId = new Property(4, String.class, "taskId", false, "TASK_ID");
        public final static Property EyeGlass = new Property(5, String.class, "eyeGlass", false, "EYE_GLASS");
        public final static Property Smile = new Property(6, String.class, "smile", false, "SMILE");
        public final static Property FaceTime = new Property(7, java.util.Date.class, "faceTime", false, "FACE_TIME");
    }


    public FaceInfoDao(DaoConfig config) {
        super(config);
    }
    
    public FaceInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FACE_INFO\" (" + //
                "\"LABLE\" TEXT," + // 0: lable
                "\"AGE\" TEXT," + // 1: age
                "\"SEX\" TEXT," + // 2: sex
                "\"ADS_ID\" TEXT," + // 3: adsId
                "\"TASK_ID\" TEXT," + // 4: taskId
                "\"EYE_GLASS\" TEXT," + // 5: eyeGlass
                "\"SMILE\" TEXT," + // 6: smile
                "\"FACE_TIME\" INTEGER);"); // 7: faceTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FACE_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, FaceInfo entity) {
        stmt.clearBindings();
 
        String lable = entity.getLable();
        if (lable != null) {
            stmt.bindString(1, lable);
        }
 
        String age = entity.getAge();
        if (age != null) {
            stmt.bindString(2, age);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(3, sex);
        }
 
        String adsId = entity.getAdsId();
        if (adsId != null) {
            stmt.bindString(4, adsId);
        }
 
        String taskId = entity.getTaskId();
        if (taskId != null) {
            stmt.bindString(5, taskId);
        }
 
        String eyeGlass = entity.getEyeGlass();
        if (eyeGlass != null) {
            stmt.bindString(6, eyeGlass);
        }
 
        String smile = entity.getSmile();
        if (smile != null) {
            stmt.bindString(7, smile);
        }
 
        java.util.Date faceTime = entity.getFaceTime();
        if (faceTime != null) {
            stmt.bindLong(8, faceTime.getTime());
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, FaceInfo entity) {
        stmt.clearBindings();
 
        String lable = entity.getLable();
        if (lable != null) {
            stmt.bindString(1, lable);
        }
 
        String age = entity.getAge();
        if (age != null) {
            stmt.bindString(2, age);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(3, sex);
        }
 
        String adsId = entity.getAdsId();
        if (adsId != null) {
            stmt.bindString(4, adsId);
        }
 
        String taskId = entity.getTaskId();
        if (taskId != null) {
            stmt.bindString(5, taskId);
        }
 
        String eyeGlass = entity.getEyeGlass();
        if (eyeGlass != null) {
            stmt.bindString(6, eyeGlass);
        }
 
        String smile = entity.getSmile();
        if (smile != null) {
            stmt.bindString(7, smile);
        }
 
        java.util.Date faceTime = entity.getFaceTime();
        if (faceTime != null) {
            stmt.bindLong(8, faceTime.getTime());
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public FaceInfo readEntity(Cursor cursor, int offset) {
        FaceInfo entity = new FaceInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // lable
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // age
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // sex
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // adsId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // taskId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // eyeGlass
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // smile
            cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)) // faceTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, FaceInfo entity, int offset) {
        entity.setLable(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setAge(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSex(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAdsId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTaskId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setEyeGlass(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSmile(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setFaceTime(cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(FaceInfo entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(FaceInfo entity) {
        return null;
    }

    @Override
    public boolean hasKey(FaceInfo entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
