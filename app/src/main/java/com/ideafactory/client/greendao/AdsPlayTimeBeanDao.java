package com.ideafactory.client.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.ideafactory.client.business.draw.layout.bean.AdsPlayTimeBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ADS_PLAY_TIME_BEAN".
*/
public class AdsPlayTimeBeanDao extends AbstractDao<AdsPlayTimeBean, String> {

    public static final String TABLENAME = "ADS_PLAY_TIME_BEAN";

    /**
     * Properties of entity AdsPlayTimeBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property ResourceId = new Property(1, String.class, "resourceId", false, "RESOURCE_ID");
        public final static Property PlayTime = new Property(2, String.class, "playTime", false, "PLAY_TIME");
        public final static Property PlayNum = new Property(3, String.class, "playNum", false, "PLAY_NUM");
        public final static Property DateTime = new Property(4, java.util.Date.class, "dateTime", false, "DATE_TIME");
    }


    public AdsPlayTimeBeanDao(DaoConfig config) {
        super(config);
    }
    
    public AdsPlayTimeBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ADS_PLAY_TIME_BEAN\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"RESOURCE_ID\" TEXT," + // 1: resourceId
                "\"PLAY_TIME\" TEXT," + // 2: playTime
                "\"PLAY_NUM\" TEXT," + // 3: playNum
                "\"DATE_TIME\" INTEGER);"); // 4: dateTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ADS_PLAY_TIME_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, AdsPlayTimeBean entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String resourceId = entity.getResourceId();
        if (resourceId != null) {
            stmt.bindString(2, resourceId);
        }
 
        String playTime = entity.getPlayTime();
        if (playTime != null) {
            stmt.bindString(3, playTime);
        }
 
        String playNum = entity.getPlayNum();
        if (playNum != null) {
            stmt.bindString(4, playNum);
        }
 
        java.util.Date dateTime = entity.getDateTime();
        if (dateTime != null) {
            stmt.bindLong(5, dateTime.getTime());
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, AdsPlayTimeBean entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String resourceId = entity.getResourceId();
        if (resourceId != null) {
            stmt.bindString(2, resourceId);
        }
 
        String playTime = entity.getPlayTime();
        if (playTime != null) {
            stmt.bindString(3, playTime);
        }
 
        String playNum = entity.getPlayNum();
        if (playNum != null) {
            stmt.bindString(4, playNum);
        }
 
        java.util.Date dateTime = entity.getDateTime();
        if (dateTime != null) {
            stmt.bindLong(5, dateTime.getTime());
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public AdsPlayTimeBean readEntity(Cursor cursor, int offset) {
        AdsPlayTimeBean entity = new AdsPlayTimeBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // resourceId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // playTime
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // playNum
            cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)) // dateTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, AdsPlayTimeBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setResourceId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPlayTime(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPlayNum(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDateTime(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
     }
    
    @Override
    protected final String updateKeyAfterInsert(AdsPlayTimeBean entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(AdsPlayTimeBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(AdsPlayTimeBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
